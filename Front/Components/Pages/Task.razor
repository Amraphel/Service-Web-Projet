@page "/tasks"
@inject TodoService todoService
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider authStateProvider

<PageTitle>Liste des Tâches</PageTitle>

<AuthorizeView>
    <Authorized>
        <h1>Liste des Tâches de @context.User.Identity.Name :</h1>
    </Authorized>
    <NotAuthorized>
        <h1>Votre Liste des Tâches :</h1>
    </NotAuthorized>
</AuthorizeView>

<p>Vos objectifs de la journée</p>

@if (todos == null)
{
    <p><em>Chargement...</em></p>
}
else
{
    <button class="btn btn-primary" @onclick="addTodo">Ajouter une tâche</button>
    <table class="table">
        <thead>
            <tr>
                <th>Status</th>
                <th>Text</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var todo in todos)
            {
                @if (!todo.IsDone)
                {
                    <tr>
                        <td><InputCheckbox @bind-Value="@todo.IsDone" /></td>
                        <td>
                            <InputText @bind-Value="todo.Text" />
                            <button class="btn btn-danger" @onclick="() => UpdateTodo(todo)">Save</button>
                            <button class="btn btn-danger" @onclick="() => DeleteTodo(todo.Id)">X</button>
                        </td>
                    </tr>
                }

            }
            <tr>
                <th>Terminée(s)</th>
            </tr>
            @foreach (var todo in todos)
            {
                @if (todo.IsDone)
                {


                    <tr>
                        <td><InputCheckbox @bind-Value="@todo.IsDone" /></td>
                        <td>
                            <InputText @bind-Value="todo.Text" />
                            <button class="btn btn-danger" @onclick="() => UpdateTodo(todo)">Save</button>
                            <button class="btn btn-danger" @onclick="() => DeleteTodo(todo.Id)">X</button>
                        </td>
                    </tr>
                }

            }
        </tbody>
    </table>
}

@code {
    private Todo[]? todos;

    protected override async System.Threading.Tasks.Task OnInitializedAsync()
    {
        todos = await todoService.GetAllTasks();
    }

    private async System.Threading.Tasks.Task addTodo()
    {
        if (todos == null) return;
        var newTodo = await todoService.CreateNewTask();
        Console.WriteLine(newTodo.Id);
        var todosList = todos.ToList();
        todosList.Add(newTodo);
        todos = todosList.ToArray();
    }

    private async System.Threading.Tasks.Task DeleteTodo(int id)
    {
        if (todos == null) return;
        await todoService.Delete(id);
        todos = todos.Where(t => t.Id != id).ToArray();
    }

    private async System.Threading.Tasks.Task UpdateTodo(Todo todo)
    {
        await todoService.UpdateTodo(todo);
    }

}
